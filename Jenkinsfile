pipeline {
    agent
		{
		//to indicate dockerfile in the same directory/current location
        dockerfile true
        }

    environment {
        BUILD_NUM_ENV = currentBuild.getNumber()
        projectName = 'HPS Engineering'
        emailTo = 'VenkateshKri@hcl.com'
        emailFrom = 'VenkateshKri-jenkins@hcl.com'
    }

    options {

           timestamps()

           //Persist artifacts and console output for the specific number of recent Pipeline runs.
           buildDiscarder(logRotator(numToKeepStr: '100'))

           //Prepend all console output generated by the Pipeline run with the time at which the line was emitted


            //On failure, retry the entire Pipeline the specified number of times
            retry(2)

            //Set a timeout period for the Pipeline run, after which Jenkins should abort the Pipeline
            // unit in 'MINUTES','HOURS','MINUTES'

            timeout(time: 5, unit: 'MINUTES')

           }

    triggers {
            //Query repository daily @ 8AM
            pollSCM('0 8 * * *')
         }

    stages {

        stage("List and Stop all Containers"){
            steps{
                // List all containers (only IDs)
                echo "List all containers (only IDs)"
                sh 'docker ps -aq'

                //Stop all running containers
                echo "Stop all running containers"
                sh 'docker stop $(docker ps -aq)'
            }

        }

        stage("Cleaning Existing Resources") {
            steps {
                echo "Cleaning up all running,unused(dangling) and stopped docker images and containers"

                //Delete all stopped containers
                sh ' docker ps -q -f status=exited | xargs --no-run-if-empty docker rm'

                // Delete all dangling (unused) images
                sh 'docker images -q -f dangling=true | xargs --no-run-if-empty docker rmi'

            }
        }

        stage ("Code Pull"){
             when {
                branch 'master'
                }
            steps{
            //Let's make sure we have the repository cloned to our workspace
                checkout scm
            }
        }

        stage('Build Image') {
            //This builds the actual image; synonymous to docker build on the command line
            // https://stackoverflow.com/questions/28349392/how-to-push-a-docker-image-to-a-private-repository

            steps {
                // docker build -t reference tag name and directory to look for dockerfile( . -> current dir)

                echo 'Building an image for deployment'
                sh 'docker build -t hps-api:latest .'
                //sh 'docker push ./API_Tier'
            }
        }

        stage('Run Docker Image and Setup CYC Server Env') {

            steps {
                echo 'Test environment build and setup'
                sh 'docker run --rm -d --name api-tier-0.1.12.9.7.2018.1 -p 5000:5000 --env CYC_SERVER="https://10.82.98.105/" api-tier-0.1.12'
            }
        }
    }

    post {

        always {
            //https://mdyzma.github.io/2017/10/14/python-app-and-jenkins/
            echo "code for always running the code"
        }
        failure {
            echo "section for failure"

            mail to: "${env.emailTo}",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "${env.JOB_NAME} (${env.BUILD_NUMBER}) ${env.projectName} build error " +
                       "is here: ${env.BUILD_URL}\nStarted by ${env.BUILD_CAUSE}"
        }
        success {
			echo "section for success"
        }
        unstable {
            echo ""
        }
        cleanup {
            echo ""
        }
    }
}